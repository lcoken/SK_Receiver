#ifndef __SKHL_COMM_CORE_H__#define __SKHL_COMM_CORE_H__#ifdef SK_WINDOWS#include <windows.h>#include "skhl_comm_define.h"#else//#include <windows.h>#include <termios.h>#include "skhl_comm_define.h"#include "skhl_hal_uart.h"#endiftypedef enum{    OPT_UART = 0,    COMM_OPT_MAX,} COMM_CHANNEL_E;#ifdef SK_WINDOWStypedef struct{    COMMTIMEOUTS    timeout;    DCB             dcb;} uart_attr_t;#endiftypedef struct{    const char      *name;    union    {        uart_attr_t attr;    };} comm_attr_t;typedef struct{    uint8_t     version;    uint8_t     cmd_set;    uint8_t     cmd_id;    uint8_t     cmd_dir;    uint8_t     target;    uint8_t     source;    uint32_t    seq_id;    uint8_t     *data;    uint32_t    data_len;} skhl_local_pack_attr_t;typedef skhl_handle (*op_comm_init)(comm_attr_t *desc);typedef uint32_t (*op_comm_read)(skhl_handle handle, uint8_t *buff, uint32_t size);typedef uint32_t (*op_comm_write)(skhl_handle handle, uint8_t *buff, uint32_t size);typedef skhl_result (*op_comm_destory)(skhl_handle handle);typedef struct{    const char      *name;    op_comm_init    init;    op_comm_read    read;    op_comm_write   write;    op_comm_destory destory;} skhl_opt_t;typedef skhl_result (*comm_call_back)(skhl_local_pack_attr_t *pack);typedef struct{    uint8_t cmd_set;    uint8_t cmd_id;    comm_call_back callback;} skhl_comm_item_t;typedef struct{    uint8_t link_device;    uint8_t target;} skhl_comm_router_t;typedef struct{    skhl_comm_item_t    *cb;    uint32_t            cb_size;    skhl_comm_router_t  *router;    uint32_t            router_size;    uint8_t             this_host;} skhl_comm_core_config_t;/*========================API for Driver Layer==================================*/skhl_result skhl_register_comm_device(skhl_opt_t *opt);skhl_result skhl_unregister_comm_device(skhl_opt_t *opt);/*========================API for APP Layer==================================*/skhl_result skhl_comm_set_attr(COMM_CHANNEL_E chnl, comm_attr_t *attr);skhl_result skhl_comm_clear_attr(COMM_CHANNEL_E chnl);skhl_result skhl_comm_core_init(void *config);skhl_result skhl_comm_core_destory(void);skhl_result skhl_comm_send_data(void *attr);#endif